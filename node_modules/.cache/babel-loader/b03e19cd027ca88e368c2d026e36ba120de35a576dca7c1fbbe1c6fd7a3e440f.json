{"ast":null,"code":"var _jsxFileName = \"D:\\\\Codinova-Frontend-Assignment\\\\assignment\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport './App.scss'; // Import your SCSS file\nimport { fetchTrendingGifs, searchGifs } from './services/api';\nimport GifList from './components/GifList';\nimport SearchBar from './components/SearchBar';\nimport Pagination from './components/Pagination';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [gifs, setGifs] = useState([]);\n  const [totalPages, setTotalPages] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchQuery, setSearchQuery] = useState('');\n  useEffect(() => {\n    if (searchQuery === '') {\n      fetchTrending();\n    } else {\n      performSearch(searchQuery);\n    }\n  }, [currentPage, searchQuery]);\n  console.log('currentPage:', currentPage);\n  console.log('totalPages:', totalPages);\n  const fetchTrending = async () => {\n    const data = await fetchTrendingGifs(10, (currentPage - 1) * 10);\n    setGifs(data);\n  };\n  const performSearch = async query => {\n    const data = await searchGifs(query, 10, (currentPage - 1) * 10);\n    setGifs(data);\n  };\n  const handleSearch = query => {\n    setSearchQuery(query);\n    setCurrentPage(1);\n  };\n  const handlePageChange = page => {\n    setCurrentPage(page);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Giphy GIF Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GifList, {\n      gifs: gifs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      totalPages: totalPages,\n      onPageChange: handlePageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Nw4WOJ49pNMJjQV9JmSrBmZvMP8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","fetchTrendingGifs","searchGifs","GifList","SearchBar","Pagination","jsxDEV","_jsxDEV","App","_s","gifs","setGifs","totalPages","setTotalPages","currentPage","setCurrentPage","searchQuery","setSearchQuery","fetchTrending","performSearch","console","log","data","query","handleSearch","handlePageChange","page","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onPageChange","_c","$RefreshReg$"],"sources":["D:/Codinova-Frontend-Assignment/assignment/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport './App.scss'; // Import your SCSS file\nimport { fetchTrendingGifs, searchGifs } from './services/api';\nimport GifList from './components/GifList';\nimport SearchBar from './components/SearchBar';\nimport Pagination from './components/Pagination';\n\nfunction App() {\n  const [gifs, setGifs] = useState([]);\n  const [totalPages, setTotalPages] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  useEffect(() => {\n    if (searchQuery === '') {\n      fetchTrending();\n    } else {\n      performSearch(searchQuery);\n    }\n  }, [currentPage, searchQuery]);\n\n  console.log('currentPage:', currentPage);\n  console.log('totalPages:', totalPages);\n\n  const fetchTrending = async () => {\n    const data = await fetchTrendingGifs(10, (currentPage - 1) * 10);\n    setGifs(data);\n  };\n\n  const performSearch = async (query) => {\n    const data = await searchGifs(query, 10, (currentPage - 1) * 10);\n    setGifs(data);\n  };\n\n  const handleSearch = (query) => {\n    setSearchQuery(query);\n    setCurrentPage(1);\n  };\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Giphy GIF Viewer</h1>\n      <SearchBar onSearch={handleSearch} />\n      <GifList gifs={gifs} />\n      <Pagination\n        currentPage={currentPage}\n        totalPages={totalPages}\n        onPageChange={handlePageChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}